<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 配置緩存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<!-- 指定 ehcache 的配置文件 -->
		<property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml" />
	</bean>

	<!-- 配置进行授权和认证的 Realm -->
	<bean id="myRealm" class="com.yr.shiro.BosRealm" /><!-- init-method="setCredentialMatcher" 初始化给密码加盐 -->

	<!-- 配置 Shiro 的 SecurityManager Bean. -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="cacheManager" ref="cacheManager" />
		<property name="realm" ref="myRealm" />
	</bean>

	<!-- 配置 Bean 后置处理器: 会自动的调用和 Spring 整合后各个组件的生命周期方法. init() destory() -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	
	
	<!-- 配置 Shiro Filter bean: 该 bean 的 id 必须和 web.xml 文件中配置的 shiro filter 的 
		name 一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 装配 securityManager -->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置登陆页面 -->
		<property name="loginUrl" value="/login" />
		<!-- 登陆成功后的一面 -->
		<property name="successUrl" value="/index" />
		<property name="unauthorizedUrl" value="shiro-unauthorized" /><!-- 登录成功未经授权页面 -->
		
		<!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截. -->
		<!-- <property name="filterChainDefinitions">
			下面的配置执行顺序,自上到下,从左到右
			<value>
				配置登出: 使用 logout 过滤器
				/shiro-logout = logout 简单过滤器，在接收到请求后，将立即注销当前正在执行的内容subject(请求) ，然后将它重定向到已配置的过滤器 redirectUrl。
				/Login.jsp = anon anon 不拦截指定   比如:登录相关
				/list.jsp = anon 页面显示 不拦截
				/add.jsp = anon 注册 不拦截
				/update.jsp = roles[user] 就是在请求/update.jsp 链接时候进入别名为 roles 的Shiro Filter ，并且参数为数组[user]
				/my/** = anon
				/role/** = anon
				/per/** = anon
				/js/** = anon
                /css/** = anon
                /img/** = anon
                /layui/** = anon
                
				/** = authc  authc 表示需要认证才能访问的页面 ,如果不是，则强制用户通过将其重定向到`登录页面`您的配置来进行登录。
				
				/xxx.jsp = login,role[2008,2009]
				上面配置意义： 就是在请求/xxx.jsp 链接时候先进入 别名为 login 的Filter ，并且无参数。别名为login 的Filter 如果没通过，
				就不会走别名为role 的Filter ，如果别名为login 的Filter 返回true ，则进入别名为role 的Filter 。也就是从前到后。 
				 PS:这样的场景是很正常的业务场景，就是先判断登录，再判断角色权限。
			</value>
		</property> -->
		  <property name ="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
	</bean>
	<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"/>  
		
	 <!-- 配置一个bean，该bean实际上是一个Map，通过实例工厂方法的方式 -->  
    <bean id="filterChainDefinitionMapBuilder" class="com.yr.shiro.FilterChainDefinitionMapBuilder"/>
	
</beans>
